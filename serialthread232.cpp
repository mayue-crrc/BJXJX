#include "serialthread232.h"
#include <QQueue>
#include <QDebug>
//#include <QTime>
#include "cglobal.h"

extern uchar sendData[D_SEND_BUFFER_SIZE];

SerialThread232::SerialThread232()
{
    port = new SerialPort232();
    readOutTimer = new QTimer;
    connect( readOutTimer, SIGNAL( timeout() ), this, SLOT( readOutTimerSlot() ) );
    comBreakCounter = 0;
    getData1();
}

SerialThread232::~SerialThread232()
{
    //mutex.lock();
    //abort = true;
    //condition.wakeOne();
    //mutex.unlock();

//    wait();
    Close();
    delete port;
}
void SerialThread232::init()
{
    //restart = false;
    //abort = false;
    readArray.clear();
    inPortFlush();
}

void SerialThread232::render()
{
    if( !isRunning() )
    {
        start();
    }
//    else
//    {
//        restart = true;
//        condition.wakeOne();
//    } //end
}
/*

*/
void SerialThread232::run()
{
    forever
    {
        if( readLength )
        {
            Read();
            if( readArray.size() >= readLength )
                readOutTimerSlot();
        }
    } // end
    //mutex.lock();
    //if( !restart )
    //    condition.wait( &mutex );
    //restart = false;
    //mutex.unlock();
}

void SerialThread232::Read()
{
    if( isOpen() ){ //port openned
        //mutexRead.lock();
        uchar buffer[1024];
        int len = port->Read( buffer );
        if( len > 0 ){
            QByteArray byteArray;
            byteArray.clear();
            for(int i=0;i<len; i++)
                byteArray[i] = buffer[i];
            readArray += byteArray;
        }//end
        //mutexRead.unlock();
    }//end
}

void SerialThread232::setDataSlot( uchar *data, int len )
{
    for( int i=0; i<len; i++ )
        sendData[ i ] = data[i];
}

void SerialThread232::setReadLength( int const len )
{
    readLength = len;
}

bool SerialThread232::isOpen()
{
    return port->isOpen();
}

void SerialThread232::outPortFlush()
{
    port->outPortFlush();
}

void SerialThread232::inPortFlush()
{
    port->inPortFlush();
    readArray.clear();
}

void SerialThread232::portRestart()
{
    //qDebug() << "portRestart";
//    this->Close();
//    this->Open();
    readLength = 0;
    Close();
    delete port;
    port = new SerialPort232();
}

int SerialThread232::writeData( uchar *writeData, int len )
{
    int length = 0;
    if( isOpen() ){
        //mutexWrite.lock();
        length = port->Write( writeData, len );
        //mutexWrite.unlock();
    }//end
    //qDebug() << "writeData: " << length;
    return length;
}

void SerialThread232::Close()
{
    if( isOpen() )
        port->Close();
}

int SerialThread232::Open()
{
    return port->Open();
}

void SerialThread232::changeBaudRate( int baudRate )
{
    switch( baudRate ){
        case 0:
            port->setBaudRate( 9600 );
            break;
        case 1:
            port->setBaudRate( 19200 );
            break;
        case 2:
            port->setBaudRate( 38400 );
            break;
        case 3:
            port->setBaudRate( 57600 );
            break;
        case 4:
            port->setBaudRate( 115200 );
            break;
    }//end
}

void SerialThread232::readOutTimerSlot()
{
    readOutTimer->stop();
    //qDebug() << "readLength: " << readLength << readArray.size() << this->isOpen();

    if( (readLength > 0) && (readArray.size() == readLength) )
    {
        emit SendReadData( readArray, readLength );
        comBreakCounter = 0;
    }
    else
    {
        emit SendReadData( readArray, 0 );
        comBreakCounter++;
        //qDebug() << "emit 0";
    }
    readArray.clear();
    //qDebug() << "isOpen()" << isOpen() << comBreakCounter;
    if(isOpen()==false || comBreakCounter>20)
    {
        comBreakCounter = 0;
        this->portRestart();
    }
    msleep(100);
    if( readLength == 225)
        this->getData2();
    else if( readLength == 205)
        this->setData();
    else if( readLength == 8 )
        this->getData1();
    else
    {
        //qDebug() << "heg0iqahwegpeawjgepajweg ";
        emit SendReadData( readArray, 0 );
        comBreakCounter++;
        this->getData1();
    }
}

void SerialThread232::getData1()
{
    readOutTimer->stop();
    init();
    if( isOpen() )
    {
        //qDebug() << "getData1()";
        this->outPortFlush();
        while( 1 )
        {
            uchar buffer[1024];
            if( port->Read( buffer ) <= 0 )
                break;
        }//end
        uchar cmd[6];
        cmd[0] = 0x01;// slave address
        cmd[1] = 0x03;// modbus function code
        cmd[2] = 0x00;// high byte of read start address
        cmd[3] = 0x00;// low byte of read start address
        cmd[4] = 0x00;// high byte of read length
        cmd[5] = 0x6E;// low byte of read length
        int len = SendRtuCmdToModBus( cmd, 6 );
        if( len == 8 )
        {
            setReadLength( 225 );
        }
        else
            this->portRestart();
    }//end

    readOutTimer->start( 300 );
}

void SerialThread232::getData2()
{
    readOutTimer->stop();
    init();
    if( isOpen() )
    {
        //qDebug() << "getData2()";
        this->outPortFlush();
        while( 1 )
        {
            uchar buffer[1024];
            if( port->Read( buffer ) <= 0 )
                break;
        }//end
        uchar cmd[6];
        cmd[0] = 0x01;// slave address
        cmd[1] = 0x03;// modbus function code
        cmd[2] = 0x00;// high byte of read start address
        cmd[3] = 0x6E;// low byte of read start address
        cmd[4] = 0x00;// high byte of read length
        cmd[5] = 0x64;// low byte of read length
        int len = SendRtuCmdToModBus( cmd, 6 );
        if( len == 8 )
        {
            setReadLength( 205 );
        }
        else
            this->portRestart();
    }//end
    readOutTimer->start( 300 );
}

void SerialThread232::setData()
{
    readOutTimer->stop();
    init();
    if( isOpen() )
    {
        //qDebug() << "setData()";
        this->outPortFlush();
        while( 1 )
        {
            uchar buffer[1024];
            if( port->Read( buffer ) <= 0 )
                break;
        }//end
        uchar cmd[47];
        cmd[0] = 0x01;// slave address
        cmd[1] = 0x10;// modbus function code
        cmd[2] = 0x00;// high byte of write start address
        cmd[3] = 0xD2;// low byte of write start address
        cmd[4] = 0x00;// high byte of write register length
        cmd[5] = 0x14;// low byte of write register length

        cmd[6] = 0x28;// write bytes length = write register length * 2

        // change hibyte and lobyte
        for( int i=0; i<(D_SEND_BUFFER_SIZE/2); i++ )
        {
            cmd[7+i*2] = sendData[i*2+1];// data
            cmd[7+i*2+1] = sendData[i*2];// data
        }

        int len = SendRtuCmdToModBus( cmd, 47 );
        if( len == 49 )
        {
            setReadLength( 8 );
        }
        else
            this->portRestart();
    }//end
    readOutTimer->start( 100 );
}

unsigned short SerialThread232::GetCRC16(unsigned char *puchMsg, unsigned short usDataLen)
{
    static unsigned char auchCRCHi[256] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
    };    //end

    static unsigned char auchCRCLo[256] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    };  //end
    unsigned char uchCRCHi = 0xFF ;
    unsigned char uchCRCLo = 0xFF ;
    unsigned uIndex = 0;

    while (usDataLen--)
    {    //start
        uIndex = uchCRCHi ^ *puchMsg++ ;
        uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
        uchCRCLo = auchCRCLo[uIndex] ;
    }    //end
    return (uchCRCHi << 8 | uchCRCLo) ;
}

unsigned short SerialThread232::GetCRC16( const QByteArray dataArray, unsigned short usDataLen )
{
    static unsigned char auchCRCHi[256] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
    };    //end

    static unsigned char auchCRCLo[256] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    };  //end
    unsigned char uchCRCHi = 0xFF ;
    unsigned char uchCRCLo = 0xFF ;
    unsigned uIndex = 0;

    for( int i=0; i<usDataLen; i++ )
    {    //start
        uIndex = uchCRCHi ^ ( (uchar)(dataArray.at(i)) ) ;
        uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
        uchCRCLo = auchCRCLo[uIndex] ;
    }    //end
    return (uchCRCHi << 8 | uchCRCLo) ;
}

int SerialThread232::SendRtuCmdToModBus(unsigned char cmd[], unsigned short len)
{
    int result = 0;
    unsigned short CRC16;
    uchar outArray[len+2];

    CRC16=GetCRC16(cmd,len);

    for( unsigned int i = 0; i < len; i++ )
        outArray[i] = cmd[i];
    outArray[len] = (unsigned char)(CRC16 >> 8 & 0x00FF);
    outArray[len+1] = (unsigned char)(CRC16 & 0x00FF);
    result = writeData( outArray, len + 2 );
    //qDebug() << "SendRtuCmdToModBus:len = " << result;
    return result;
}//end
